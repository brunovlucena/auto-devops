apiVersion: batch/v1
kind: Job
metadata:
  name: irsa-test-job
  namespace: knative-lambda
spec:
  template:
    spec:
      serviceAccountName: knative-lambda-builder
      containers:
      - name: aws-cli-irsa-test
        image: amazon/aws-cli:latest # Uses the official AWS CLI image
        command:
          - "/bin/sh"
          - "-c"
          - |
            echo "Attempting to assume IAM role..."
            echo "Service Account Token File: $AWS_WEB_IDENTITY_TOKEN_FILE"
            echo "Target Role ARN: $AWS_ROLE_ARN"

            if [ -z "$AWS_WEB_IDENTITY_TOKEN_FILE" ] || [ -z "$AWS_ROLE_ARN" ]; then
              echo "Error: AWS_WEB_IDENTITY_TOKEN_FILE or AWS_ROLE_ARN is not set."
              echo "Please ensure the Service Account is correctly annotated and IRSA is configured."
              exit 1
            fi

            if [ ! -f "$AWS_WEB_IDENTITY_TOKEN_FILE" ]; then
              echo "Error: Token file $AWS_WEB_IDENTITY_TOKEN_FILE does not exist."
              exit 1
            fi

            TOKEN=$(cat $AWS_WEB_IDENTITY_TOKEN_FILE)
            if [ -z "$TOKEN" ]; then
              echo "Error: Failed to read token from $AWS_WEB_IDENTITY_TOKEN_FILE or token is empty."
              exit 1
            fi

            echo "Token successfully read. Attempting sts:AssumeRoleWithWebIdentity..."
            # Store the assume-role result and get credentials
            CREDS_FILE=$(mktemp)
            aws sts assume-role-with-web-identity \
              --role-arn $AWS_ROLE_ARN \
              --role-session-name irsa-test-session-$RANDOM \
              --web-identity-token "$TOKEN" \
              --duration-seconds 900 \
              --output json > $CREDS_FILE
            
            STS_EXIT_CODE=$?
            if [ $STS_EXIT_CODE -eq 0 ]; then
              echo "Successfully assumed IAM role."
              
              # Create AWS CLI profile with the temporary credentials
              mkdir -p ~/.aws
              
              # Extract credentials without using jq
              ACCESS_KEY=$(grep -o '"AccessKeyId": "[^"]*' $CREDS_FILE | cut -d'"' -f4)
              SECRET_KEY=$(grep -o '"SecretAccessKey": "[^"]*' $CREDS_FILE | cut -d'"' -f4)
              SESSION_TOKEN=$(grep -o '"SessionToken": "[^"]*' $CREDS_FILE | cut -d'"' -f4)

              # Create a profile in the AWS config
              echo "[assumed-role]" > ~/.aws/credentials
              echo "aws_access_key_id = $ACCESS_KEY" >> ~/.aws/credentials
              echo "aws_secret_access_key = $SECRET_KEY" >> ~/.aws/credentials
              echo "aws_session_token = $SESSION_TOKEN" >> ~/.aws/credentials

              # Clean up temporary credentials file
              rm -f $CREDS_FILE
              
              # Use the profile to make an AWS API call
              echo "Testing with assumed role credentials..."
              aws sts get-caller-identity --profile assumed-role
              
              API_EXIT_CODE=$?
              if [ $API_EXIT_CODE -eq 0 ]; then
                echo "Successfully made AWS API call with assumed role."
                exit 0
              else
                echo "Failed to make AWS API call with assumed role. Exit code: $API_EXIT_CODE"
                exit $API_EXIT_CODE
              fi
            else
              echo "Failed to assume IAM role. Exit code: $STS_EXIT_CODE"
              exit $STS_EXIT_CODE
            fi
      restartPolicy: Never # Or OnFailure, depending on your preference for retries
  backoffLimit: 1 # Number of retries before considering the job failed