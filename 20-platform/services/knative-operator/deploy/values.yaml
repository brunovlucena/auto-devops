minio:

  metrics:
    serviceMonitor:
      enabled: false

  ## Set default rootUser, rootPassword
  ## rootUser and rootPassword is generated when not set
  ## Distributed MinIO ref: https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-multi-node-multi-drive.html
  ##
  rootUser: "minioadmin"
  rootPassword: "minioadmin"

  ## All mentioned variables will be ignored in values file.
  ## .data.rootUser and .data.rootPassword are mandatory,
  ## others depend on enabled status of corresponding sections.
  # existingSecret: ""

  # Set mode to standalone since we're using a single replica
  mode: standalone
  # Number of drives attached to a node
  drivesPerNode: 2
  # Number of MinIO containers running
  replicas: 1
  # Number of expanded MinIO clusters
  pools: 1

  ## Trusted Certificates Settings for MinIO. Ref: https://min.io/docs/minio/linux/operations/network-encryption.html#third-party-certificate-authorities
  ## Bundle multiple trusted certificates into one secret and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
  ## When using self-signed certificates, remember to include MinIO's own certificate in the bundle with key public.crt.
  ## If certSecret is left empty and tls is enabled, this chart installs the public certificate from .Values.tls.certSecret.
  trustedCertsSecret: ""

  persistence:
    enabled: true
    size: 10Gi
  
  # ingress:
  #   enabled: true
  #   ingressClassName: ~
  #   labels: {}
  #     # node-role.kubernetes.io/ingress: platform
  #   annotations: {}
  #     # kubernetes.io/ingress.class: nginx
  #     # kubernetes.io/tls-acme: "true"
  #     # kubernetes.io/ingress.allow-http: "false"
  #     # kubernetes.io/ingress.global-static-ip-name: ""
  #     # nginx.ingress.kubernetes.io/secure-backends: "true"
  #     # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  #     # nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0
  #   path: /
  #   hosts:
  #     - minio-example.local
  #   tls: []
  #   #  - secretName: chart-example-tls
  #   #    hosts:
  #   #      - chart-example.local

  # consoleIngress:
  #   enabled: false
  #   ingressClassName: ~
  #   labels: {}
  #     # node-role.kubernetes.io/ingress: platform
  #   annotations: {}
  #     # kubernetes.io/ingress.class: nginx
  #     # kubernetes.io/tls-acme: "true"
  #     # kubernetes.io/ingress.allow-http: "false"
  #     # kubernetes.io/ingress.global-static-ip-name: ""
  #     # nginx.ingress.kubernetes.io/secure-backends: "true"
  #     # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
  #     # nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0
  #   path: /
  #   hosts:
  #     - console.minio-example.local
  #   tls: []
  #   #  - secretName: chart-example-tls
  #   #    hosts:
  #   #      - chart-example.local

  # nodeSelector: {}
  # tolerations: []
  # affinity: {}

  resources:
    requests:
      memory: 256Mi

  ## List of users to be created after minio install
  ##
  users:
    ## Username, password and policy to be assigned to the user
    ## Default policies are [readonly|readwrite|writeonly|consoleAdmin|diagnostics]
    ## Add new policies as explained here https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management.html#access-management
    ## NOTE: this will fail if LDAP is enabled in your MinIO deployment
    ## make sure to disable this if you are using LDAP.
    - accessKey: console
      secretKey: console123
      policy: consoleAdmin
    # Or you can refer to specific secret
    #- accessKey: externalSecret
    #  existingSecret: my-secret
    #  existingSecretKey: password
    #  policy: readonly

  ## List of buckets to be created after minio install
  ##
  buckets:
      # Name of the bucket
    - name: knative-lambdas
      # Policy to be set on the
      # bucket [none|download|upload|public]
      policy: none
      # Purge if bucket exists already
      purge: false
      # set versioning for
      # bucket [true|false]
      versioning: false # remove this key if you do not want versioning feature
      # set objectlocking for
      # bucket [true|false] NOTE: versioning is enabled by default if you use locking
      objectlocking: false

